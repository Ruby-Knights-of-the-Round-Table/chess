<h2><%= @game.game_name %></h2>

<!-- checkmoves(king, attacking_pieces, board ) -->

<div class="turn text-center">
  <% if @game.turn == @game.white_player.id  %>
    <div class="white-players-turn">
      <h4>white player's turn:</h4>
      <h5><%= @game.white_player.email %></h5>
    </div>
  <% elsif @game.black_player != nil && @game.turn == @game.black_player.id %>
    <div class="black-players-turn">
      <h4>black player's turn:</h4>
      <h5><%= @game.black_player.email %></h5>
    </div>
  <% elsif @game.black_player == nil %>
    <div class="waiting">
      <h4>Waiting for second player to join ... </h4>
    </div>
  <% end %>
</div>

<div class="game-board" data-game-id="<%= @game.id %>" data-time-stamp="<%= Time.now.to_s %>">
  <% current_king = @game.pieces.find_by(player_id: current_player.id, type: "King" ) %>

  <% pieces_attacking_king = current_king.if_check?(@board) %>

  <% active_pieces = @game.pieces.where(captured_piece: false).order(y_position: :asc, x_position: :asc) %>
  <% piece_trace = 0%>
  <% selected_piece_id = @game.pieces.find_by(selected: true) || 0 %>
  <table id='board'>
    <% 8.times do |row| %>
      <%= '<tr>'.html_safe %>
        <% 8.times do |cell| %>

            <!-- square has a piece and piece is selected -->
            <% if @board[row][cell] != 0 && selected_piece_id != 0 %>
              <% if (selected_piece_id.x_position == cell && selected_piece_id.y_position == row) %>
                <td class="selected" data-y-position="<%=row%>" data-x-position="<%=cell%>" id="square-<%=row%>-<%=cell%>">
                  <% piece = active_pieces[piece_trace] %>
                  <% piece_trace += 1 %>

                  <div class="selected_piece" data-piece-id="<%=piece.id%>" data-piece-color="<%= piece.player_id == @game.white_player_id ? "white" : "black" %>">
                    <%= "#{piece.symbol}".html_safe %>
                  </div>

                  <% next %>
                </td>
              <% end %>
            <% end %>

            <!-- empty square can't be moved to because king is in check -->
            <% if pieces_attacking_king != [] && selected_piece_id != 0 && @board[row][cell] == 0%>
              <% if !selected_piece_id.checkmoves(current_king, pieces_attacking_king, @board ).include?([row,cell]) %>
                <td class="empty" id="square-<%=row%>-<%=cell%>">

                </td>
                <% next %>
              <% end %>
            <% end %>

            <!-- piece can't be moved to because king is in check -->
            <% if pieces_attacking_king != [] && selected_piece_id != 0 && @board[row][cell] != 0%>

              <% if !selected_piece_id.checkmoves(current_king, pieces_attacking_king, @board ).include?([row,cell]) %>
                <td class="selectable" id="square-<%=row%>-<%=cell%>">
                <% piece = active_pieces[piece_trace] %>
                <% piece_trace += 1 %>

                <div class="piece" data-piece-id="<%=piece.id%>" data-piece-color="<%= piece.player_id == @game.white_player_id ? "white" : "black" %>">
                  <%= "#{piece.symbol}".html_safe %>
                </div>


              </td>
                <% next %>
              <% end %>
            <% end %>

            <!-- square has a piece and it's signed-in player's turn (can hover over piece)-->
            <!-- Note: s -->
            <% if @board[row][cell] != 0 && @board[row][cell] == @game.turn && current_player.id == @game.turn %>
              <td class="selectable" data-y-position="<%=row%>" data-x-position="<%=cell%>" id="square-<%=row%>-<%=cell%>">
                <% piece = active_pieces[piece_trace] %>
                <% piece_trace += 1 %>

                  <div class="selectable_piece" data-piece-id="<%=piece.id%>" data-piece-color="<%= piece.player_id == @game.white_player_id ? "white" : "black" %>">
                    <%= "#{piece.symbol}".html_safe %>
                  </div>


                <% next %>
              </td>
            <% end %>

            <!-- square does not have a piece -->
            <% if @board[row][cell] == 0 %>
              <% if selected_piece_id == 0 %>
                <td class="empty" id="square-<%=row%>-<%=cell%>">

                </td>

              <% elsif !selected_piece_id.piece_can_move_to(@board).include?([row,cell]) %>

                <td class="empty" id="square-<%=row%>-<%=cell%>">

                </td>

              <% else %>
              <td class="highlighted" data-y-position="<%=row%>" data-x-position="<%=cell%>" id="square-<%=row%>-<%=cell%>">

              </td>
              <% end %>
              <% next %>
            <% end %>

            <!-- square has a piece that can be captured
                  current issue: capturing destination doesn't get called because identical if statement
                  getting called on line 55-->
            <% if @board[row][cell] != current_player.id && @board[row][cell] != 0 && selected_piece_id != 0%>


              <% if selected_piece_id.piece_can_move_to(@board).include?([row,cell]) %>
                <td class="highlighted" data-y-position="<%=row%>" data-x-position="<%=cell%>" id="square-<%=row%>-<%=cell%>">
                  <% piece = active_pieces[piece_trace] %>
                  <% piece_trace += 1 %>
                  <div class="piece" data-piece-id="<%=piece.id%>" data-piece-color="<%= piece.player_id == @game.white_player_id ? "white" : "black" %>">
                    <%= "#{piece.symbol}".html_safe %>
                  </div>

                </td>
              <% else %>
                <td class="not-selectable" id="square-<%=row%>-<%=cell%>">
                <% piece = active_pieces[piece_trace] %>
                <% piece_trace += 1 %>

                <div class="piece" data-piece-id="<%=piece.id%>" data-piece-color="<%= piece.player_id == @game.white_player_id ? "white" : "black" %>">
                  <%= "#{piece.symbol}".html_safe %>
                </div>


              </td>
              <% end %>
              <% next %>
            <% end %>

            <!-- square has a piece but it's not signed-in player's turn (can't hover over piece) or theres a check -->
            <% if @board[row][cell] != 0 %>
                <td class="not-selectable" id="square-<%=row%>-<%=cell%>">
                <% piece = active_pieces[piece_trace] %>
                  <% piece_trace += 1 %>

                  <div class="piece" data-piece-id="<%=piece.id%>" data-piece-color="<%= piece.player_id == @game.white_player_id ? "white" : "black" %>">
                    <%= "#{piece.symbol}".html_safe %>
                  </div>

                  <% next %>
                </td>
            <% end %>
         <% end %>

      <%= '</tr>'.html_safe %>
    <% end %>
  </table>
</div>

<div class="captured">
    <% captured_white_pieces = @game.pieces.where(captured_piece: true).where('player_id = ?', @game.white_player_id).order(y_position: :asc, x_position: :asc) %>
    <% captured_black_pieces = @game.pieces.where(captured_piece: true).where('player_id = ?', @game.black_player_id).order(y_position: :asc, x_position: :asc) %>

    <div class="captured-white">
      <% captured_white_pieces.each do |piece| %>
        <%= "#{piece.symbol}".html_safe %>
      <% end %>
    </div>

    <div class="captured-black">
      <% captured_black_pieces.each do |piece| %>
        <%= "#{piece.symbol}".html_safe %>
      <% end %>
    </div>

</div>

<script src="https://www.gstatic.com/firebasejs/3.6.4/firebase.js"></script>
<script>
$(function() {

  // Initialize Firebase
  var config = {
    apiKey: "AIzaSyBtB_3FCuqPVKmJkB_EuDkXq0gvE9DX2DM",    // save in environment
    authDomain: "ruby-knights.firebaseapp.com",
    databaseURL: "https://ruby-knights.firebaseio.com",
    storageBucket: "ruby-knights.appspot.com",
    messagingSenderId: "349996601563"
  };
  firebase.initializeApp(config);

    var gameID = "game"+ $('.game-board').data('game-id');
    var loadTimeStamp = $('.game-board').data('time-stamp');

    var rootRef = firebase.database().ref();
    var joinGameRef = rootRef.child(gameID);
    var pieceUpdateRef = rootRef.child(gameID);

    joinGameRef.on('value', function(snapshot) {
      var data = snapshot.val();
      if (data) {
        // show that it's white player's turn when second player joins
        $('.waiting h4').replaceWith("<h4>white player's turn:</h4>");
        $('.waiting').append("<h5>" + data.first_player_email + "</h5>");
        $('.waiting').switchClass('waiting', 'white-players-turn');

        makeWhitePiecesSelectable();
        $('.selectable').click(makeClickable);
      }
    });

    pieceUpdateRef.on('value', function(snapshot) {
      var data = snapshot.val();
      if (data) {
        var updatedTimeStamp = data.timeStamp

        // get piece from origin square
        var piece = $("#square-" + data.y_select + "-" + data.x_select).text();

        // get destination square
        var square = $("#square-" + data.y_update + "-" + data.x_update);

        if (updatedTimeStamp > loadTimeStamp) {
          // clear destination square (piece capture)
          square.empty();

          // set piece color for moved piece (if it's black player's turn then the last piece moved was a white piece, and vice versa)
          if (data.turn == data.black_player_id) {
            var color = "white"
          }
          else if (data.turn == data.white_player_id) {
            var color = "black"
          }

          // append piece to destination square
          square.append("<div class='piece' data-piece-id='" + data.pieceId + "' data-piece-color='" + color + "'>" + piece + "</div>");
          square.switchClass('empty', 'not-selectable');

          // clear square that piece came from
          $("#square-" + data.y_select + "-" + data.x_select).empty();

          // change turn
          changeTurn (data.turn, data.white_player_id, data.black_player_id, data.white_player_email, data.black_player_email);

          // clear out selectable class on all pieces/squares
          deselectAll();

          // make pieces selectable if it's player's turn
          makeSelectable(data.turn, data.white_player_id, data.black_player_id);

          $('.selectable').click(makeClickable);
        }
      }

    });

    function makeWhitePiecesSelectable() {
      $('.piece[data-piece-color="white"]').each(function() {
        $(this).switchClass('piece', 'selectable_piece');
      })

      $('.piece[data-piece-color="white"]').parent().each(function() {
        $(this).switchClass('not-selectable', 'selectable');
      });
    }

    function makeSelectable(turn, white_player_id, black_player_id) {
      // make pieces selectable if it's player's turn
      if (turn == white_player_id) {
        $('.piece[data-piece-color="white"]').each(function() {
          $(this).switchClass('piece', 'selectable_piece');
        })

        $('.piece[data-piece-color="white"]').parent().each(function() {
          $(this).switchClass('not-selectable', 'selectable');
        });
      }

      else if (turn == black_player_id) {
        $('.piece[data-piece-color="black"]').each(function() {
          $(this).switchClass('piece', 'selectable_piece');
        });
        $('.piece[data-piece-color="black"]').parent().each(function() {
          $(this).switchClass('not-selectable', 'selectable');
        });
      }
    }

    function deselectAll() {
      // clear out selectable class on all pieces/squares
      $('.selectable_piece').each(function() {
        $(this).switchClass('selectable_piece', 'piece');
      });
      $('.selectable').each(function() {
        $(this).switchClass('selectable', 'not-selectable');
      });
    }

    function changeTurn(turn, white_player_id, black_player_id, white_player_email, black_player_email) {
      if (turn == white_player_id) {
        $('.black-players-turn h4').replaceWith("<h4>white player's turn:</h4>");
        $('.black-players-turn h5').replaceWith("<h5>" + white_player_email + "</h5>");
        $('.black-players-turn').switchClass('black-players-turn', 'white-players-turn');

      }
      else if (turn == black_player_id) {
        $('.white-players-turn h4').replaceWith("<h4>black player's turn:</h4>");
        $('.white-players-turn h5').replaceWith("<h5>" + black_player_email + "</h5>");
        $('.white-players-turn').switchClass('white-players-turn', 'black-players-turn');
      }
    }

    function deselectPiece() {
      $('.selected_piece').draggable().draggable("disable");
      $('.selected_piece').removeClass('ui-draggable ui-draggable-handle ui-draggable-disabled');
      $('.selected_piece').switchClass('selected_piece', 'selectable_piece');
    }

    function disableDroppable() {
      $('.highlighted').droppable().droppable("disable");
      $('.highlighted').removeClass('highlighted ui-droppable ui-droppable-disabled');
    }

    function makeDraggable(e) {
    e.draggable().draggable("enable");
    e.draggable({
      revert: 'invalid',
      containment: 'table',
      scroll: false,
      });
    }

    function makeDroppable(e) {
      // make droppable elements (highlighted squares)
      e.droppable().droppable("enable");
      e.droppable({
        accept: '.selected_piece',
        drop: function(event, ui) {

          // 'highlighted' should refer to square that accepts dropped piece
          var highlighted = $(this);

          // center the piece inside the highlighted square
          var selected_piece = ui.draggable;
          selected_piece.position({
            my: "center",
            at: "center",
            of: highlighted,
            });

          // get data to update piece position
          var piece_update = {
            id: selected_piece.data('piece-id'),
            y_position: highlighted.data('y-position'),
            x_position: highlighted.data('x-position'),
          }

          $.ajax({
            type: "PUT",
            url: '/pieces/' + piece_update.id,
            dataType: 'json',
            data: { id: piece_update.id, y_position: piece_update.y_position, x_position: piece_update.x_position },
            success: function(data) {

              // deselect squares
              $('.selected').off("click");
              $('.selected').switchClass('selected', 'empty');
              disableDroppable();

              // deselect piece
              deselectPiece();

            }
          });

        }
      });
    }

    function makeClickable(event) {

      // selectable square
      var selectable = $(this);

      // get id for selectable piece
      var piece_select = {
        id: $(event.target).data('piece-id'),
        y_position: selectable.data('y-position'),
        x_position: selectable.data('x-position'),
      }

      // select the piece, using ajax request
      $.ajax({
        type: 'PUT',
        url: '/pieces/' + piece_select.id + '/select/',
        dataType: 'json',
        data: { id: piece_select.id, y_position: piece_select.y_position, x_position: piece_select.x_position },
        success: function(data) {

          // deselect squares
          $('.selected').off("click").click(makeClickable);
          $('.selected').switchClass('selected', 'selectable');
          disableDroppable();

          // select new square
          selectable.switchClass('selectable', 'selected');

          // deselect piece
          deselectPiece();

          // select new piece
          $(event.target).switchClass('selectable_piece', 'selected_piece');
          makeDraggable($(event.target));

          // highlight new final spots
          $.each(data.final_spots, function(index, spot) {
            $("#square-" + spot[0] + "-" + spot[1]).addClass('highlighted').attr('data-y-position', spot[0]).attr('data-x-position', spot[1]);
          });

          // make new final spots droppable
          makeDroppable($('.highlighted'));

        }
      })
    }

    // selectable squares can be selected on click
    $('.selectable').click(makeClickable);
    $('.selected').click(makeClickable);

  });

</script>
